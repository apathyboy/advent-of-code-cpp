name: build-and-test
on: [push]

jobs:
  job:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
            vcpkgCommitId: 'b49b2bdf22559c89eddbf29a29621a1dc6929320'
            configurePreset: 'x64-debug'
            buildPreset: 'verbose-build-windows'
            testPreset: 'core-test-windows'
          - os: ubuntu-latest
            triplet: x64-linux
            vcpkgCommitId: 'b49b2bdf22559c89eddbf29a29621a1dc6929320'
            configurePreset: 'linux-debug'
            buildPreset: 'verbose-build-linux'
            testPreset: 'core-test-linux'
    
    env:
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache
    
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Linux Deps
        if: startsWith(matrix.os, 'ubuntu')
        run: sudo apt-get install -y libgl1-mesa-dev libxxf86vm-dev libxrandr-dev libxinerama-dev libxcursor-dev xorg-dev

      - name: Set up Clang
        if: startsWith(matrix.os, 'ubuntu')
        uses: egor-tensin/setup-clang@v1
        with:
          version: 16
          platform: x64
          
      - uses: lukka/get-cmake@latest

      - name: Restore artifacts or setups vcpkg
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgGitCommitId: '${{ matrix.vcpkgCommitId }}'

      - name: Run CMake
        uses: lukka/run-cmake@v10
        with:
          configurePreset: '${{ matrix.configurePreset }}'
          buildPreset: '${{ matrix.buildPreset }}'
          testPreset: '${{ matrix.testPreset }}'

      - name: Run CTest
        shell: 'bash'
        run: 'ctest --preset ${{ matrix.testPreset }}'
